[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "ping",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "ping",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "signup_user_from_form",
        "importPath": "user_forms",
        "description": "user_forms",
        "isExtraImport": true,
        "detail": "user_forms",
        "documentation": {}
    },
    {
        "label": "login_user_from_form",
        "importPath": "user_forms",
        "description": "user_forms",
        "isExtraImport": true,
        "detail": "user_forms",
        "documentation": {}
    },
    {
        "label": "add_transaction_form",
        "importPath": "transactions_and_balance_forms",
        "description": "transactions_and_balance_forms",
        "isExtraImport": true,
        "detail": "transactions_and_balance_forms",
        "documentation": {}
    },
    {
        "label": "set_balance_form",
        "importPath": "transactions_and_balance_forms",
        "description": "transactions_and_balance_forms",
        "isExtraImport": true,
        "detail": "transactions_and_balance_forms",
        "documentation": {}
    },
    {
        "label": "SessionData",
        "importPath": "session_data",
        "description": "session_data",
        "isExtraImport": true,
        "detail": "session_data",
        "documentation": {}
    },
    {
        "label": "SessionData",
        "importPath": "session_data",
        "description": "session_data",
        "isExtraImport": true,
        "detail": "session_data",
        "documentation": {}
    },
    {
        "label": "BalanceDatabaseManager",
        "importPath": "balance",
        "description": "balance",
        "isExtraImport": true,
        "detail": "balance",
        "documentation": {}
    },
    {
        "label": "TransactionsDatabaseManager",
        "importPath": "transactions",
        "description": "transactions",
        "isExtraImport": true,
        "detail": "transactions",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "response",
        "description": "response",
        "isExtraImport": true,
        "detail": "response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "response",
        "description": "response",
        "isExtraImport": true,
        "detail": "response",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "UserDatabaseManager",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "BalanceDatabaseManager",
        "kind": 6,
        "importPath": "balance",
        "description": "balance",
        "peekOfCode": "class BalanceDatabaseManager:\n    def __init__(self, user_email) -> None:\n        self.user_email = user_email\n        self.balance = db[\"balance\"]\n    def set_balance(self, amount):\n        result = self.balance.insert_one(\n            {\"user_email\": self.user_email, \"amount\": amount}\n        )\n        return result\n    def update_balance(self, amount):",
        "detail": "balance",
        "documentation": {}
    },
    {
        "label": "BudgetsDatabaseManager",
        "kind": 6,
        "importPath": "budgets",
        "description": "budgets",
        "peekOfCode": "class BudgetsDatabaseManager:\n    PRIMARY_KEY = \"item\"\n    def __init__(self, user_email) -> None:\n        self.user_id = user_email\n        self.budgets = db[\"budgets\"][user_email]\n    def create_budget(self, transaction_data):\n        result = self.budgets.insert_one(transaction_data)\n        return result\n    def retrieve_budgets(self):\n        return self.budgets",
        "detail": "budgets",
        "documentation": {}
    },
    {
        "label": "ping",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def ping():\n    try:\n        client.admin.command(\"ping\")\n        return True\n    except Exception as e:\n        return False",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "MONGODB_USERNAME",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "MONGODB_USERNAME = os.getenv(\"MONGODB_USERNAME\")\nMONGODB_PASSWORD = os.getenv(\"MONGODB_PASSWORD\")\nMONGODB_CLUSTER = os.getenv(\"MONGODB_CLUSTER\")\nDB_NAME = \"nancy\"\n# Create a MongoDB client and database instance\nuri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "MONGODB_PASSWORD",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "MONGODB_PASSWORD = os.getenv(\"MONGODB_PASSWORD\")\nMONGODB_CLUSTER = os.getenv(\"MONGODB_CLUSTER\")\nDB_NAME = \"nancy\"\n# Create a MongoDB client and database instance\nuri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "MONGODB_CLUSTER",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "MONGODB_CLUSTER = os.getenv(\"MONGODB_CLUSTER\")\nDB_NAME = \"nancy\"\n# Create a MongoDB client and database instance\nuri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DB_NAME = \"nancy\"\n# Create a MongoDB client and database instance\nuri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")\n        return True",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "uri",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "uri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")\n        return True\n    except Exception as e:\n        return False",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "client = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")\n        return True\n    except Exception as e:\n        return False",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "db = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")\n        return True\n    except Exception as e:\n        return False",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "COMMANDS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "COMMANDS = [\"signup\", \"login\", \"logout\", \"transact\", \"quit\"]\ncurrent_session_data = SessionData()\nprint(\"Nancy has been started.\")\nwhile True:\n    command = input(\"Enter command: \")\n    if command == \"signup\":\n        print(\"\\nSIGNUP\")\n        user_signup_form = {}\n        user_signup_form[\"name\"] = input(\"Enter name: \")\n        user_signup_form[\"email\"] = input(\"Enter email: \")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "current_session_data",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "current_session_data = SessionData()\nprint(\"Nancy has been started.\")\nwhile True:\n    command = input(\"Enter command: \")\n    if command == \"signup\":\n        print(\"\\nSIGNUP\")\n        user_signup_form = {}\n        user_signup_form[\"name\"] = input(\"Enter name: \")\n        user_signup_form[\"email\"] = input(\"Enter email: \")\n        user_signup_form[\"password\"] = input(\"Enter password: \")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "response",
        "description": "response",
        "peekOfCode": "class Response:\n    def __init__(self):\n        self.is_error = False\n        self.error_message = \"\"\n        self.data = None",
        "detail": "response",
        "documentation": {}
    },
    {
        "label": "SessionData",
        "kind": 6,
        "importPath": "session_data",
        "description": "session_data",
        "peekOfCode": "class SessionData:\n    def __init__(self) -> None:\n        self.is_session = False\n        self.transactions_dbm = None\n        self.balance_dbm = None\n    def start_session_data(self, user_email):\n        self.is_session = True\n        self.transactions_dbm = TransactionsDatabaseManager(user_email)\n        self.balance_dbm = BalanceDatabaseManager(user_email)\n    def stop_session_data(self):",
        "detail": "session_data",
        "documentation": {}
    },
    {
        "label": "TransactionsDatabaseManager",
        "kind": 6,
        "importPath": "transactions",
        "description": "transactions",
        "peekOfCode": "class TransactionsDatabaseManager:\n    def __init__(self, user_email) -> None:\n        self.user_id = user_email\n        self.transactions = db[\"transactions\"][user_email]\n    def create_transaction(self, transaction_data):\n        result = self.transactions.insert_one(transaction_data)\n        return result\n    def retrieve_transactions(self):\n        return self.transactions",
        "detail": "transactions",
        "documentation": {}
    },
    {
        "label": "validate_amount",
        "kind": 2,
        "importPath": "transactions_and_balance_forms",
        "description": "transactions_and_balance_forms",
        "peekOfCode": "def validate_amount(amount):\n    try:\n        abs(float(amount))\n    except ValueError:\n        return False\n    return True\ndef validate_date(date_string):\n    pattern = re.compile(r\"^\\d{2}-\\d{2}-\\d{4}$\")\n    if not pattern.match(date_string):\n        return False, \"Invalid date format. Please use dd-mm-yyyy.\\n\"",
        "detail": "transactions_and_balance_forms",
        "documentation": {}
    },
    {
        "label": "validate_date",
        "kind": 2,
        "importPath": "transactions_and_balance_forms",
        "description": "transactions_and_balance_forms",
        "peekOfCode": "def validate_date(date_string):\n    pattern = re.compile(r\"^\\d{2}-\\d{2}-\\d{4}$\")\n    if not pattern.match(date_string):\n        return False, \"Invalid date format. Please use dd-mm-yyyy.\\n\"\n    try:\n        parsed_date = datetime.strptime(date_string, \"%d-%m-%Y\").date()\n    except ValueError:\n        return False, \"Invalid date. Please enter a valid date.\\n\"\n    today = date.today()\n    lower_bound = today - timedelta(days=3 * 30)",
        "detail": "transactions_and_balance_forms",
        "documentation": {}
    },
    {
        "label": "add_transaction_form",
        "kind": 2,
        "importPath": "transactions_and_balance_forms",
        "description": "transactions_and_balance_forms",
        "peekOfCode": "def add_transaction_form(session_data: SessionData, transaction_form):\n    if session_data.is_session:\n        description = transaction_form[\"description\"]\n        amount = transaction_form[\"amount\"]\n        category = transaction_form[\"category\"]\n        date = transaction_form[\"date\"]\n        response = Response()\n        response.data = {}\n        if not description:\n            response.error_message += (",
        "detail": "transactions_and_balance_forms",
        "documentation": {}
    },
    {
        "label": "set_balance_form",
        "kind": 2,
        "importPath": "transactions_and_balance_forms",
        "description": "transactions_and_balance_forms",
        "peekOfCode": "def set_balance_form(session_data: SessionData, balance_form):\n    if session_data.is_session:\n        amount = balance_form[\"amount\"]\n        response = Response()\n        response.data = {}\n        if not validate_amount(amount):\n            response.error_message += (\n                \"Invalid amount. Amount entered is not a number.\\n\"\n            )\n            response.is_error = True",
        "detail": "transactions_and_balance_forms",
        "documentation": {}
    },
    {
        "label": "UserDatabaseManager",
        "kind": 6,
        "importPath": "user",
        "description": "user",
        "peekOfCode": "class UserDatabaseManager:\n    PRIMARY_KEY = \"email\"\n    def __init__(self) -> None:\n        self.users = db[\"users\"]\n    def create_user(self, user_data):\n        result = self.users.insert_one(user_data)\n        return result\n    def retrieve_user(self, key):\n        query = {self.PRIMARY_KEY: key}\n        user = self.users.find_one(query)",
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "validate_name",
        "kind": 2,
        "importPath": "user_forms",
        "description": "user_forms",
        "peekOfCode": "def validate_name(name):\n    return bool(re.match(\"^[a-zA-Z -]+$\", name))\ndef validate_email(email):\n    # A simple email validation using regular expression\n    email_pattern = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n    return bool(re.match(email_pattern, email))\ndef validate_password(password):\n    # Password should contain at least one letter and one number, with a minimum length of 5 characters\n    return bool(re.match(r\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{5,}$\", password))\ndef hash_password(password):",
        "detail": "user_forms",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "kind": 2,
        "importPath": "user_forms",
        "description": "user_forms",
        "peekOfCode": "def validate_email(email):\n    # A simple email validation using regular expression\n    email_pattern = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n    return bool(re.match(email_pattern, email))\ndef validate_password(password):\n    # Password should contain at least one letter and one number, with a minimum length of 5 characters\n    return bool(re.match(r\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{5,}$\", password))\ndef hash_password(password):\n    sha256_hash = hashlib.sha256()\n    sha256_hash.update(password.encode(\"utf-8\"))",
        "detail": "user_forms",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "kind": 2,
        "importPath": "user_forms",
        "description": "user_forms",
        "peekOfCode": "def validate_password(password):\n    # Password should contain at least one letter and one number, with a minimum length of 5 characters\n    return bool(re.match(r\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{5,}$\", password))\ndef hash_password(password):\n    sha256_hash = hashlib.sha256()\n    sha256_hash.update(password.encode(\"utf-8\"))\n    hashed_password = sha256_hash.hexdigest()\n    return hashed_password\ndef signup_user_from_form(user_signup_form: dict):\n    name = user_signup_form[\"name\"]",
        "detail": "user_forms",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "user_forms",
        "description": "user_forms",
        "peekOfCode": "def hash_password(password):\n    sha256_hash = hashlib.sha256()\n    sha256_hash.update(password.encode(\"utf-8\"))\n    hashed_password = sha256_hash.hexdigest()\n    return hashed_password\ndef signup_user_from_form(user_signup_form: dict):\n    name = user_signup_form[\"name\"]\n    email = user_signup_form[\"email\"]\n    password = user_signup_form[\"password\"]\n    response = Response()",
        "detail": "user_forms",
        "documentation": {}
    },
    {
        "label": "signup_user_from_form",
        "kind": 2,
        "importPath": "user_forms",
        "description": "user_forms",
        "peekOfCode": "def signup_user_from_form(user_signup_form: dict):\n    name = user_signup_form[\"name\"]\n    email = user_signup_form[\"email\"]\n    password = user_signup_form[\"password\"]\n    response = Response()\n    response.data = {}\n    if not validate_name(name):\n        response.error_message += \"Invalid name. Name should only contain alphabets.\\n\"\n        response.is_error = True\n    if not validate_email(email):",
        "detail": "user_forms",
        "documentation": {}
    },
    {
        "label": "login_user_from_form",
        "kind": 2,
        "importPath": "user_forms",
        "description": "user_forms",
        "peekOfCode": "def login_user_from_form(user_login_form):\n    email = user_login_form[\"email\"]\n    password = user_login_form[\"password\"]\n    response = Response()\n    response.data = {}\n    if not validate_email(email):\n        response.error_message += \"Invalid email address.\\n\"\n        response.is_error = True\n    if not validate_password(password):\n        response.error_message += \"Invalid password.\\n\"",
        "detail": "user_forms",
        "documentation": {}
    },
    {
        "label": "user_dbm",
        "kind": 5,
        "importPath": "user_forms",
        "description": "user_forms",
        "peekOfCode": "user_dbm = UserDatabaseManager()\ndef validate_name(name):\n    return bool(re.match(\"^[a-zA-Z -]+$\", name))\ndef validate_email(email):\n    # A simple email validation using regular expression\n    email_pattern = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n    return bool(re.match(email_pattern, email))\ndef validate_password(password):\n    # Password should contain at least one letter and one number, with a minimum length of 5 characters\n    return bool(re.match(r\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{5,}$\", password))",
        "detail": "user_forms",
        "documentation": {}
    },
    {
        "label": "me",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "me = \"Victor Momodu\"\nother = \"Funminiyi Aderemi\"\nchatlist = []\nchatlines = chat.splitlines()\nlast_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    },
    {
        "label": "other",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "other = \"Funminiyi Aderemi\"\nchatlist = []\nchatlines = chat.splitlines()\nlast_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:\n        chatlist.append({s: text})",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    },
    {
        "label": "chatlist",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "chatlist = []\nchatlines = chat.splitlines()\nlast_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:\n        chatlist.append({s: text})\n    else:",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    },
    {
        "label": "chatlines",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "chatlines = chat.splitlines()\nlast_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:\n        chatlist.append({s: text})\n    else:\n        chatlist[-1][s] += f\"\\n{text}\"",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    },
    {
        "label": "last_sender",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "last_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:\n        chatlist.append({s: text})\n    else:\n        chatlist[-1][s] += f\"\\n{text}\"\n    last_sender = s",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    }
]