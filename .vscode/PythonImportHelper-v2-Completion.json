[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "response",
        "description": "response",
        "isExtraImport": true,
        "detail": "response",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "ping",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "ping",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def ping():\n    try:\n        client.admin.command(\"ping\")\n        return True\n    except Exception as e:\n        return False",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "MONGODB_USERNAME",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "MONGODB_USERNAME = os.getenv(\"MONGODB_USERNAME\")\nMONGODB_PASSWORD = os.getenv(\"MONGODB_PASSWORD\")\nMONGODB_CLUSTER = os.getenv(\"MONGODB_CLUSTER\")\nDB_NAME = \"nancy\"\n# Create a MongoDB client and database instance\nuri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "MONGODB_PASSWORD",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "MONGODB_PASSWORD = os.getenv(\"MONGODB_PASSWORD\")\nMONGODB_CLUSTER = os.getenv(\"MONGODB_CLUSTER\")\nDB_NAME = \"nancy\"\n# Create a MongoDB client and database instance\nuri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "MONGODB_CLUSTER",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "MONGODB_CLUSTER = os.getenv(\"MONGODB_CLUSTER\")\nDB_NAME = \"nancy\"\n# Create a MongoDB client and database instance\nuri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "DB_NAME",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DB_NAME = \"nancy\"\n# Create a MongoDB client and database instance\nuri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")\n        return True",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "uri",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "uri = f\"mongodb+srv://{MONGODB_USERNAME}:{MONGODB_PASSWORD}@{MONGODB_CLUSTER}.vfhiusw.mongodb.net/?retryWrites=true&w=majority\"\nclient = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")\n        return True\n    except Exception as e:\n        return False",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "client = MongoClient(uri)\ndb = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")\n        return True\n    except Exception as e:\n        return False",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "db = client[DB_NAME]\n# Function to check the database connection\ndef ping():\n    try:\n        client.admin.command(\"ping\")\n        return True\n    except Exception as e:\n        return False",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "response",
        "description": "response",
        "peekOfCode": "class Response:\n    def __init__(self):\n        self.is_error = False\n        self.error_message = \"\"\n        self.data = None",
        "detail": "response",
        "documentation": {}
    },
    {
        "label": "UserDatabaseManager",
        "kind": 6,
        "importPath": "user",
        "description": "user",
        "peekOfCode": "class UserDatabaseManager:\n    PRIMARY_KEY = \"email\"\n    def __init__(self) -> None:\n        self.users = db[\"users\"]\n    def create_user(self, user_data):\n        result = self.users.insert_one(user_data)\n        return result\n    def retrieve_user(self, key):\n        query = {self.PRIMARY_KEY: key}\n        user = self.users.find_one(query)",
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "validate_name",
        "kind": 2,
        "importPath": "user",
        "description": "user",
        "peekOfCode": "def validate_name(name):\n    return bool(re.match(\"^[a-zA-Z -]+$\", name))\ndef validate_email(email):\n    # A simple email validation using regular expression\n    email_pattern = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n    return bool(re.match(email_pattern, email))\ndef validate_password(password):\n    # Password should contain at least one letter and one number, with a minimum length of 5 characters\n    return bool(re.match(r\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{5,}$\", password))\ndef create_user_from_form(user_create_form: dict):",
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "kind": 2,
        "importPath": "user",
        "description": "user",
        "peekOfCode": "def validate_email(email):\n    # A simple email validation using regular expression\n    email_pattern = re.compile(r\"[^@]+@[^@]+\\.[^@]+\")\n    return bool(re.match(email_pattern, email))\ndef validate_password(password):\n    # Password should contain at least one letter and one number, with a minimum length of 5 characters\n    return bool(re.match(r\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{5,}$\", password))\ndef create_user_from_form(user_create_form: dict):\n    name = user_create_form[\"name\"]\n    email = user_create_form[\"email\"]",
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "kind": 2,
        "importPath": "user",
        "description": "user",
        "peekOfCode": "def validate_password(password):\n    # Password should contain at least one letter and one number, with a minimum length of 5 characters\n    return bool(re.match(r\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{5,}$\", password))\ndef create_user_from_form(user_create_form: dict):\n    name = user_create_form[\"name\"]\n    email = user_create_form[\"email\"]\n    password = user_create_form[\"password\"]\n    response = Response()\n    response.data = {}\n    # Validate user input",
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "create_user_from_form",
        "kind": 2,
        "importPath": "user",
        "description": "user",
        "peekOfCode": "def create_user_from_form(user_create_form: dict):\n    name = user_create_form[\"name\"]\n    email = user_create_form[\"email\"]\n    password = user_create_form[\"password\"]\n    response = Response()\n    response.data = {}\n    # Validate user input\n    if not validate_name(name):\n        response.error_message += \"Invalid name. Name should only contain alphabets.\\n\"\n        response.is_error = True",
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "login_user_from_from",
        "kind": 2,
        "importPath": "user",
        "description": "user",
        "peekOfCode": "def login_user_from_from(user_login_form):\n    email = user_login_form[\"email\"]\n    password = user_login_form[\"password\"]\n    hashed_password = bcrypt.hashpw(password.encode(\"utf-8\"))\nif __name__ == \"__main__\":\n    print(f\"Ping: {ping()}\")\n    form0 = {\n        \"name\": \"Victor Momodu\",\n        \"email\": \"vmomodu@email.com\",\n        \"password\": \"dogunsola123\",",
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "me",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "me = \"Victor Momodu\"\nother = \"Funminiyi Aderemi\"\nchatlist = []\nchatlines = chat.splitlines()\nlast_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    },
    {
        "label": "other",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "other = \"Funminiyi Aderemi\"\nchatlist = []\nchatlines = chat.splitlines()\nlast_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:\n        chatlist.append({s: text})",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    },
    {
        "label": "chatlist",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "chatlist = []\nchatlines = chat.splitlines()\nlast_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:\n        chatlist.append({s: text})\n    else:",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    },
    {
        "label": "chatlines",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "chatlines = chat.splitlines()\nlast_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:\n        chatlist.append({s: text})\n    else:\n        chatlist[-1][s] += f\"\\n{text}\"",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    },
    {
        "label": "last_sender",
        "kind": 5,
        "importPath": "WhatsApp chat resolver",
        "description": "WhatsApp chat resolver",
        "peekOfCode": "last_sender = \"Start\"\nfor c in chatlines:\n    _, chattext = c.split(\"] \")\n    sender, text = chattext.split(\": \")\n    s = other if sender == other else me\n    if s != last_sender:\n        chatlist.append({s: text})\n    else:\n        chatlist[-1][s] += f\"\\n{text}\"\n    last_sender = s",
        "detail": "WhatsApp chat resolver",
        "documentation": {}
    }
]